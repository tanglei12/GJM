package com.gjp.util.toPdf;

import com.gjp.util.AppUtil;
import com.itextpdf.text.pdf.parser.ImageRenderInfo;
import com.itextpdf.text.pdf.parser.PdfReaderContentParser;
import com.itextpdf.text.pdf.parser.RenderListener;
import com.itextpdf.text.pdf.parser.TextRenderInfo;
import com.lowagie.text.DocumentException;
import com.lowagie.text.Image;
import com.lowagie.text.pdf.*;
import org.apache.pdfbox.multipdf.PDFMergerUtility;

import java.awt.*;
import java.awt.geom.Rectangle2D;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.IOException;

/**
 * @author shenhx
 * @date 20170907
 */
public class HtmlToPdf {

    //wkhtmltopdf在系统中的路径
    private static String toPdfTool = "D:\\Program Files (x86)\\wkhtmltopdf\\bin\\wkhtmltopdf.exe";


    /**
     * html转pdf
     *
     * @param srcPath  html路径，可以是硬盘上的路径，也可以是网络路径
     * @param destPath pdf保存路径
     * @return 转换成功返回true
     */
    public static boolean convert(String srcPath, String destPath) {
        File file = new File(destPath);
        //如果pdf保存路径不存在，则创建路径
        File parent = file.getParentFile();
        if (!parent.exists()) {
            parent.mkdirs();
        }
        StringBuilder cmd = new StringBuilder();
        if (System.getProperty("os.name").indexOf("Windows") == -1) {
            //非windows 系统
            toPdfTool = "/mnt/wkhtmltox/wkhtmltox/bin/wkhtmltopdf";
        }
        cmd.append(toPdfTool);
        cmd.append(" ");
//        cmd.append("  --header-line");//页眉下面的线
        //cmd.append("  --header-center 这里是页眉这里是页眉这里是页眉这里是页眉 ");//页眉中间内容
        cmd.append("  --margin-top 1cm ");//设置页面上边距 (default 10mm)
//        cmd.append(" --header-html  file:///"+WebUtil.getServletContext().getRealPath("")+FileUtil.convertSystemFilePath("\\style\\pdf\\head.html"));// (添加一个HTML页眉,后面是网址)
        cmd.append(" --header-spacing 2 ");//    (设置页眉和内容的距离,默认0)
        //cmd.append(" --footer-center (设置在中心位置的页脚内容)");//设置在中心位置的页脚内容
//        cmd.append(" --footer-html  file:///"+WebUtil.getServletContext().getRealPath("")+FileUtil.convertSystemFilePath("\\style\\pdf\\foter.html"));// (添加一个HTML页脚,后面是网址)
//        cmd.append(" --footer-line");//* 显示一条线在页脚内容上)
        cmd.append(" --footer-spacing 2 ");// (设置页脚和内容的距离)
        cmd.append(srcPath);
        cmd.append(" ");
        cmd.append(destPath);

        boolean result = true;
        try {
            Process proc = Runtime.getRuntime().exec(cmd.toString());
            HtmlToPdfInterceptor error = new HtmlToPdfInterceptor(proc.getErrorStream());
            HtmlToPdfInterceptor output = new HtmlToPdfInterceptor(proc.getInputStream());
            error.start();
            output.start();
            proc.waitFor();
        } catch (Exception e) {
            result = false;
            e.printStackTrace();
        }

        return result;
    }

    /**
     * 获取指定目录下的文件
     *
     * @param folder
     * @return
     * @throws IOException
     */
    private static String[] getFiles(String folder) throws IOException {
        File _folder = new File(folder);
        String[] filesInFolder;

        if (_folder.isDirectory()) {
            filesInFolder = _folder.list();
            return filesInFolder;
        } else {
            throw new IOException("Path is not a directory");
        }
    }

    public static void main(String[] args) throws Exception {
        HtmlToPdf.convert("http://192.168.0.43/contractObject/contractPreview?con_code=CON15059643518693632&con_type=tg&con_uses=preview&con_where=pc&generate=ture", "d:/test/contract.pdf");
        HtmlToPdf.convert("http://192.168.0.43/contractObject/contractAuthBook?con_code=CON15059643518693632&con_type=tg&generate=ture", "d:/test/authbook.pdf");

        String folder = "d:/test";
        String destinationFileName = "mergedTest.pdf";
        String watermarkFile = "wartermark.pdf";
        HtmlToPdf.mergePDF(folder, "contract.pdf", "authbook.pdf", destinationFileName);
        // 要输出的pdf文件
//        BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(new File(folder + "/" + watermarkFile)));
//        HtmlToPdf.waterMark(bos, folder + "/" + destinationFileName, "D:\\watermark.png");
        float[] ff = HtmlToPdf.getKeyWords("d:/test/" + destinationFileName);
        System.out.println(">>>>>>>>>>" + ff[0] + "===" + ff[1] + "===" + ff[2]);

        Thread.sleep(3000);
        new File("d:/test/contract.pdf").delete();
        new File("d:/test/authbook.pdf").delete();
//        new File("d:/test/mergedTest.pdf").delete();
    }

    /**
     * 合并PDF
     *
     * @param folder
     * @param destinationFileName
     * @throws IOException
     */
    public static void mergePDF(String folder, String contract_name, String authBook_name, String destinationFileName) throws IOException {
        //pdf合并工具类
        PDFMergerUtility mergePdf = new PDFMergerUtility();

        String[] filesInFolder = getFiles(folder);

        for (int i = filesInFolder.length - 1; i >= 0; i--) {
            if (AppUtil.isNotNull(filesInFolder[i]) && filesInFolder[i].equals(contract_name)) {

                //循环添加要合并的pdf存放的路径
                mergePdf.addSource(folder + File.separator + filesInFolder[i]);
            }
        }

        for (int i = filesInFolder.length - 1; i >= 0; i--) {
            if (AppUtil.isNotNull(filesInFolder[i]) && filesInFolder[i].equals(authBook_name)) {

                //循环添加要合并的pdf存放的路径
                mergePdf.addSource(folder + File.separator + filesInFolder[i]);
            }
        }

        //设置合并生成pdf文件名称
        mergePdf.setDestinationFileName(folder + File.separator + destinationFileName);
        //合并pdf
        mergePdf.mergeDocuments();
    }

    /**
     * PDF添加水印
     *
     * @param imageFilePath
     */
    public static void waterMark(BufferedOutputStream bos, String input, String imageFilePath) throws DocumentException, IOException {
        PdfReader reader = new PdfReader(input);
        PdfStamper stamper = new PdfStamper(reader, bos);
        int total = reader.getNumberOfPages() + 1;
        PdfContentByte content;
        BaseFont base = BaseFont.createFont("STSong-Light", "UniGB-UCS2-H", BaseFont.EMBEDDED);
        PdfGState gs = new PdfGState();
        for (int i = 1; i < total; i++) {
            content = stamper.getOverContent(i);// 在内容上方加水印
            //content = stamper.getUnderContent(i);//在内容下方加水印
            gs.setFillOpacity(0.2f);
            // content.setGState(gs);
            content.beginText();
            content.setColorFill(Color.LIGHT_GRAY);
//            content.setFontAndSize(base, 50);
            content.setTextMatrix(70, 200);
//            content.showTextAligned(Element.ALIGN_CENTER, "公司内部文件，请注意保密！", 300,350, 55);
            Image image = Image.getInstance(imageFilePath);
            image.setAlignment(Image.LEFT | Image.TEXTWRAP);
//            image.setBorder(Image.BOX);
//            image.setBorderWidth(10);
//            image.setBorderColor("#fff");
//            image.scaleToFit(1000, 72);//大小
//            image.setRotationDegrees(-30);//旋转
            image.setAbsolutePosition(0, 0); // set the first background image of the absolute
//            image.scaleToFit(200,200);
            content.addImage(image);
            content.setColorFill(Color.BLACK);
            content.setFontAndSize(base, 8);
            content.endText();

        }
        stamper.close();
    }

    // 定义关键字
    public static String KEY_WORD = "署";
    // 定义返回值
    public static float[] resu = null;
    // 定义返回页码
    public static int i = 0;

    /*
     * 返回关键字所在的坐标和页数 float[0] >> X float[1] >> Y float[2] >> page
     */
    public static float[] getKeyWords(String filePath) {
        try {
            com.itextpdf.text.pdf.PdfReader pdfReader = new com.itextpdf.text.pdf.PdfReader(filePath);
            int pageNum = pdfReader.getNumberOfPages();
            PdfReaderContentParser pdfReaderContentParser = new PdfReaderContentParser(pdfReader);

            // 下标从1开始
            for (i = 1; i < pageNum; i++) {
                pdfReaderContentParser.processContent(i, new RenderListener() {

                    @Override
                    public void renderText(TextRenderInfo textRenderInfo) {
                        String text = textRenderInfo.getText();
                        if (null != text && text.equals(KEY_WORD)) {
                            Rectangle2D.Float boundingRectange = textRenderInfo.getBaseline().getBoundingRectange();
                            resu = new float[3];
                            resu[0] = boundingRectange.x;
                            resu[1] = boundingRectange.y;
                            resu[2] = i;
                        }
                    }

                    @Override
                    public void renderImage(ImageRenderInfo arg0) {
                    }

                    @Override
                    public void endTextBlock() {
                    }

                    @Override
                    public void beginTextBlock() {
                    }
                });
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return resu;
    }
}