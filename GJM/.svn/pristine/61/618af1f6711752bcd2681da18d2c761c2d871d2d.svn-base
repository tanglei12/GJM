package com.gjp.config;

import com.gjp.model.*;
import com.gjp.service.*;
import com.gjp.util.AppConfig;
import com.gjp.util.XmlClass;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.annotation.Resource;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

/**
 * 任务配置
 *
 * @author JiangQt
 * @description ron表达式详解：
 * <p>
 * 一个cron表达式有至少6个（也可能7个）有空格分隔的时间元素。
 * <p>
 * 按顺序依次为
 * 1 秒（0~59）
 * 2 分钟（0~59）
 * 3 小时（0~23）
 * 4 天（0~31）
 * 5 月（0~11）
 * 6 星期（1~7 1=SUN 或 SUN，MON，TUE，WED，THU，FRI，SAT）
 * 7 年份（1970－2099）
 * 其中每个元素可以是一个值(如6),一个连续区间(9-12),一个间隔时间(8-18/4)(/表示每隔4小时),一个列表(1,3,5),通配符。由于"月份中的日期"和"星期中的日期"这两个元素互斥的,必须要对其中一个设置?.
 * 0 0 10,14,16 * * ?           每天上午10点，下午2点，4点
 * 0 0/30 9-17 * * ?            朝九晚五工作时间内每半小时
 * 0 0 12 ? * WED               表示每个星期三中午12点
 * "0 0 12 * * ?"               每天中午12点触发
 * "0 15 10 ? * *"              每天上午10:15触发
 * "0 15 10 * * ?"              每天上午10:15触发
 * "0 15 10 * * ? *"            每天上午10:15触发
 * "0 15 10 * * ? 2005"         2005年的每天上午10:15触发
 * "0 * 14 * * ?"               在每天下午2点到下午2:59期间的每1分钟触发
 * "0 0/5 14 * * ?"             在每天下午2点到下午2:55期间的每5分钟触发
 * "0 0/5 14,18 * * ?"          在每天下午2点到2:55期间和下午6点到6:55期间的每5分钟触发
 * "0 0-5 14 * * ?"             在每天下午2点到下午2:05期间的每1分钟触发
 * "0 10,44 14 ? 3 WED"         每年三月的星期三的下午2:10和2:44触发
 * "0 15 10 ? * MON-FRI"        周一至周五的上午10:15触发
 * "0 15 10 15 * ?"             每月15日上午10:15触发
 * "0 15 10 L * ?"              每月最后一日的上午10:15触发
 * "0 15 10 ? * 6L"             每月的最后一个星期五上午10:15触发
 * "0 15 10 ? * 6L 2002-2005"   2002年至2005年的每月的最后一个星期五上午10:15触发
 * "0 15 10 ? * 6#3"            每月的第三个星期五上午10:15触发
 * 有些子表达式能包含一些范围或列表
 * 例如：子表达式（天（星期））可以为 “MON-FRI”，“MON，WED，FRI”，“MON-WED,SAT”
 * “*”字符代表所有可能的值
 * “/”字符用来指定数值的增量
 * 例如：在子表达式（分钟）里的“0/15”表示从第0分钟开始，每15分钟
 * 在子表达式（分钟）里的“3/20”表示从第3分钟开始，每20分钟（它和“3，23，43”）的含义一样
 * “？”字符仅被用于天（月）和天（星期）两个子表达式，表示不指定值
 * 当2个子表达式其中之一被指定了值以后，为了避免冲突，需要将另一个子表达式的值设为“？”
 * “L” 字符仅被用于天（月）和天（星期）两个子表达式，它是单词“last”的缩写
 * 如果在“L”前有具体的内容，它就具有其他的含义了。例如：“6L”表示这个月的倒数第６天
 * 注意：在使用“L”参数时，不要指定列表或范围，因为这会导致问题
 * W 字符代表着平日(Mon-Fri)，并且仅能用于日域中。它用来指定离指定日的最近的一个平日。大部分的商业处理都是基于工作周的，所以 W 字符可能是非常重要的。
 * 例如，日域中的 15W 意味着 "离该月15号的最近一个平日。" 假如15号是星期六，那么 trigger 会在14号(星期五)触发，因为星期四比星期一离15号更近。
 * C：代表“Calendar”的意思。它的意思是计划所关联的日期，如果日期没有被关联，则相当于日历中所有日期。例如5C在日期字段中就相当于日历5日以后的第一天。1C在星期字段中相当于星期日后的第一天。
 * 字段       允许值   允许的特殊字符
 * 秒         0-59           , - * /
 * 分         0-59           , - * /
 * 小时       0-23           , - * /
 * 日期       1-31           , - * ? / L W C
 * 月份       1-12 或者 JAN-DEC           , - * /
 * 星期       1-7 或者 SUN-SAT           , - * ? / L C #
 * 年（可选）           留空, 1970-2099           , - * /
 * @date Created in 2018-5-10
 */
@Component
public class TaskConfig {

    @Resource
    private OrderService orderService;
    @Resource
    private FinanceManageService financeManageService;
    @Resource
    private SmsService userInfoService;
    @Resource
    private UserCenterEmployeeService employeeService;
    @Resource
    private HouseIntentionService houseIntentionService;
    @Resource
    private HouseLibraryService houseLibraryService;

    /*==【同步数据】====================================================*/

    /**
     * 同步支付订单之合同账单
     * <p>每日00:10:00执行</p>
     *
     * @return
     */
    @Scheduled(cron = "0 10 0 * * ?")
    public void syncPayOrderForContractBill() {
        try {
            orderService._syncPayOrderForContractBill(AppConfig.channel_erp_pc, null, null, 7);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 同步支付订单之合同分期账单
     * <p>每日00:10:00执行</p>
     *
     * @return
     */
    @Scheduled(cron = "0 10 0 * * ?")
    public void syncPayOrderForContractInstalmentBill() {
        try {
            orderService._syncPayOrderForContractInstalmentBill(AppConfig.channel_erp_pc, 7);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 计算支付订单滞纳金数据
     * <p>每日00:16:00执行</p>
     */
    @Scheduled(cron = "0 16 0 * * ?")
    public void syncPayOrderLateFee() {
        try {
            orderService._syncPayOrderLateFee();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*==【发送短信】====================================================*/

    /**
     * 发送催租短信
     * <P>每日09点执行</P>
     *
     * @author shenhx
     * @date 2017-10-26
     */
    @Scheduled(cron = "0 0 9 * * ?")
    public void sendPressPaymentMsg() {
        System.out.println("开始发催租短信啦。。。。。。");

        // 催租7天
        try {
            List<ContractBillVo> bill7Days = userInfoService.queryPressPayentBillList(7);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: bill7Days) {
                    userInfoService.sendCusPressRentMsg(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 催租3天
        try {
            List<ContractBillVo> billVos3Days = userInfoService.queryPressPayentBillList(3);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: billVos3Days) {
                    userInfoService.sendCusPressRentMsg(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 催租1天
        try {
            List<ContractBillVo> billVos1Days = userInfoService.queryPressPayentBillList(1);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: billVos1Days) {
                    userInfoService.sendCusPressRentMsg(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 逾期1天
        try {
            List<ContractBillVo> financeBillList = userInfoService.queryPressPayentBillList(-1);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: financeBillList) {
                    contractBillVo.setBcb_overdueDay(1);
                    userInfoService.sendCusRentOverdueMsg(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 逾期2天
        try {
            List<ContractBillVo> financeBillList = userInfoService.queryPressPayentBillList(-2);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: financeBillList) {
                    contractBillVo.setBcb_overdueDay(2);
                    userInfoService.sendCusRentOverdueMsg(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 逾期3天
        try {
            List<ContractBillVo> financeBillList = userInfoService.queryPressPayentBillList(-3);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: financeBillList) {
                    contractBillVo.setBcb_overdueDay(3);
                    userInfoService.sendCusRentOverdueMsg(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 逾期4天
        try {
            List<ContractBillVo> financeBillList = userInfoService.queryPressPayentBillList(-4);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: financeBillList) {
                    contractBillVo.setBcb_overdueDay(4);
                    userInfoService.sendCusRentOverdueMsg(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * 发送催租短信
     * <P>每日09点执行</P>
     *
     * @author shenhx
     * @date 2017-10-26
     */
    @Scheduled(cron = "0 0 12 * * ?")
    public void sendRentOverdueMsg() {

        // 逾期4天
        try {
            List<ContractBillVo> financeBillList = userInfoService.queryPressPayentBillList(-4);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: financeBillList) {
                    userInfoService.sendEmpHouseRecoveryMsg1(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }

        // 逾期5天
        try {
            List<ContractBillVo> financeBillList = userInfoService.queryPressPayentBillList(-5);
            new Thread(() -> {
                for (ContractBillVo contractBillVo: financeBillList) {
                    Company company = new Company();
                    company.setUcc_id(contractBillVo.getUcc_id());
                    company = employeeService.queryCompanyInfo(company);
                    if (company != null) {
                        contractBillVo.setUcc_person(company.getUcc_person());
                        contractBillVo.setUcc_phone(company.getUcc_phone());
                    }
                    userInfoService.sendEmpHouseRecoveryMsg2(contractBillVo);
                }
            }).start();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /*==【更新数据】====================================================*/

    /**
     * 修改意向房源的
     * <P>每日01点执行</P>
     */
    @Scheduled(cron = "0 0 1 * * ?")
    public void updateHouseIntentionBulidType() {// 计时器
        houseIntentionService.updateHouseIntentionBulidType();// ----两天后将私有盘改为公有盘（每天晚上1点触发）
        houseIntentionService.updateHouseIntentionBulidTypePrivate();// ----楼盘保护最多7天后将楼盘变成公盘（每天晚上1点触发）
    }

    /**
     * 更新定金状态
     * <P>每日00:00:00执行</P>
     */
//    @Scheduled(cron = "1 0 0 * * ?")
    public void updateDownPaymentStatus() {
        FinanceDownPaymentVo financeDownPaymentVo = new FinanceDownPaymentVo();
        financeDownPaymentVo.setFdp_status(AppConfig.fdp_status_2);
        financeDownPaymentVo.setFdp_invaild_time_lt(new Date());
        List<FinanceDownPaymentVo> financeDownPaymentList = orderService.queryFinanceDownPaymentList(financeDownPaymentVo);
        for (FinanceDownPaymentVo downPaymentVo: financeDownPaymentList) {
            // 更新定金-过期
            FinanceDownPaymentVo financeDownPaymentVo1 = new FinanceDownPaymentVo();
            financeDownPaymentVo1.setFdp_id(downPaymentVo.getFdp_id());
            financeDownPaymentVo1.setFdp_status(AppConfig.fdp_status_4);
            financeDownPaymentVo1.setFdp_remarks("系统自动处理");
            financeManageService.updateFinanceDownPayment(financeDownPaymentVo1);

            // 添加定金记录

            // 保存房源定金违约收入
            houseLibraryService.addDownPayment(downPaymentVo);
        }
    }

    /**
     * 增加或更新房源空置期亏损记录
     * <P>每日00:00:00执行</P>
     * author: shenhx
     * date: 2018-05-29
     */
    @Scheduled(cron = "1 0 0 * * ?")
//    @Scheduled(cron = "0 0 16 * * ?")
    public void addVocantLossRecord() {
        List<HouseInfoKeep> houseInfoKeepList = houseLibraryService.queryVacantHouseList();
        for (HouseInfoKeep infoKeep: houseInfoKeepList) {
            new Thread(() -> {
                try {
                    houseLibraryService.saveGrossProfitRecord(infoKeep);
                } catch (Exception e) {
                    e.printStackTrace();
                    System.out.println("保存空置期亏损记录失败，房源编号为：" + infoKeep.getHi_code());
                }
            }).start();
        }
    }


    /**
     * 所有内部用户插入xml
     *
     * @author 陈智颖
     */
//    @Scheduled(cron = "0/5 * *  * * ? ")
    public void userXmlTo() {
        List<UserCenterEmployee> selectALLAccounts = employeeService.selectALLAccount();
        // 根目录路径
        UserCenterEmployee centerEmployeet = new UserCenterEmployee();
        StringBuilder account = new StringBuilder();
        for (UserCenterEmployee userCenterEmployee: selectALLAccounts) {
            account.append(userCenterEmployee.getEm_account()).append("-");
        }
        account = new StringBuilder(account.substring(0, account.length() - 1));
        centerEmployeet.setEm_account(account.toString());
        String path = this.getClass().getClassLoader().getResource("../../").getPath();
        List<Object> userMessageContents = new ArrayList<>();
        userMessageContents.add(centerEmployeet);
        XmlClass.classtoXml(path, userMessageContents, "user.xml", centerEmployeet);
    }

}
