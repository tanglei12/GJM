#######################################
##         log4j配置相关说明
#######################################
##%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
##%r 输出自应用启动到输出该log信息耗费的毫秒数
##%c 输出所属的类目，通常就是所在类的全名
##%t 输出产生该日志事件的线程名
##%m 输出代码中指定的信息
##%n 输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
##%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy MM dd HH:mm:ss,SSS}，输出类似： 2002年10月18日 22：10：28，921
##%l 输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
##log4j提供4种布局:
##org.apache.log4j.HTMLLayout（以HTML表格形式布局）
##org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
##org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
##org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息
##log4j中有五级logger 输出级别:
##FATAL 0
##ERROR 3
##WARN 4
##INFO 6
##DEBUG 7
#######################################
##          log4j相关配置
#######################################
##日志输出级别
#log4j.rootLogger=WARN,stdout,other
##设置stdout的日志输出控制台
#log4j.appender.stdout=org.apache.log4j.ConsoleAppender
##输出日志到控制台的方式，默认为System.out
#log4j.appender.stdout.Target=System.out
##设置使用灵活布局
#log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
##灵活定义输出格式
#log4j.appender.stdout.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %m %n
##设置other的日志输出控制台
#log4j.appender.other=org.apache.log4j.RollingFileAppender
##设置other的输出日志
#log4j.appender.other.File=${webapp.root}/WEB-INF/logs/log.log
##设置other的日志最大限制
#log4j.appender.other.MaxFileSize=1024KB
##最多只保存20个备份文件
#log4j.appender.other.MaxBackupIndex=1000
##输出 WARN 级别以上的日志
#og4j.appender.other.Threshold=WARN
##设置使用灵活布局
#log4j.appender.other.layout=org.apache.log4j.PatternLayout
##灵活定义输出格式
#log4j.appender.other.layout.ConversionPattern=[%p][%d{yyyy-MM-dd HH:mm:ss}] %l %t %m %n
#######################################
## spring相关配置
#######################################
log4j.rootCategory=DEBUG,stdout
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%d %p [%c] - <%m>%n
#
log4j.category.org.springframework=ERROR
log4j.category.org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver=DEBUG
log4j.category.org.springframework.web.servlet.DispatcherServlet=DEBUG
log4j.category.org.springframework.beans.factory=ERROR
log4j.category.org.mybatis.spring=ERROR
log4j.category.org.apache=ERROR
log4j.category.com.atomikos=ERROR
log4j.category.com.aliyun.oss=ERROR
#
#log4j.rootLogger = S
#log4j.appender.S = org.apache.log4j.ConsoleAppender
#log4j.appender.S.Target = System.out
#log4j.appender.S.Threshold = WARN
#log4j.appender.S.layout = org.apache.log4j.PatternLayout
#log4j.appender.S.layout.ConversionPattern = [%-5p] %d{yyyy-MM-dd HH:mm:ss,SSS} method:%l%n%m%n